
###################################################################
# Name : Hathaipat Chumninoul
# Student ID : 6201012620244
# Date: 2020-08-08
# Expression Tree
# class_tree for 2 Expression
###################################################################

class tree() :               #คลาสสำหรับสร้างtree
    
    def __init__(self,data) :       #สำหรับการสร้างขนาดของtree เเบบ  complete
        self.data = data           
        self.ptree = []
        for i in range(len(data)) :     #เป็นการวนไล่เช็คเพื่อตัดวงเล็บในข้อมูลออกเพื่อได้ข้อมูลที่ต้องการ
            if data[i] == '(' or data[i] == ')' :      # เงื่อนไขสำหรับเช็ควงเล็บ
                pass
            else :
                self.ptree.append(data[i])         #นำข้อมูลที่ไม่มีวงเล็บมาใส่ในlistใหม่
        i = 0
        while True :           #เป็นการวนเพื่อสร้างขนาดของtree เเบบ  complete ที่เหมาะสมกับจำนวนข้อมูล
            if len(self.ptree) <= (2**(i))-1 :      #เงื่อนว่าถ้าจำนวนของข้อมูลมีน้อยกว่าหรือเท่ากับขนาดของtreeให้ทำเงื่อนไขนี้ , (2**(i))-1 คือสมการหาขนาดของtree 
                temp = 2**(i) - 1                  #temp คือตัวเเปรสำหรับเก็บค่าขนาดของtree
                break                         #หยุดloop
            else :
                i += 1
                pass
        self.mylist = ['None'] * temp           #สร้างตัวเเปรสำหรับเก็บค่าlistที่มีสมาชิกเท่ากับtreeเเละเเต่ละตัวเป็นstring Noneเพื่อบอกว่าคือtreeเปล่า
        
    def making(self) :                           #เป็นฟังก์ชั่นเพื่อนำข้อมูลมาจัดให้อยู่ในรูปเเบบtree
        self.Ndata = self.data[1:-1]               #นำวงเล็บคู่นอกสุดของมูลออกเนื่องจากไม่จำเป็นในการคิด
        p = 0
        for i in self.Ndata :                           
            self.left = (p * 2) + 1                        #สมการหาตำเเหน่งของnodeลูกฝั่งซ้ายจาก nodeพ่อเเม่
            self.right = (p * 2) + 2                      #สมการหาตำเเหน่งของnodeลูกฝั่งขวาจาก nodeพ่อเเม่
            if i == '(' :                                #เป็นเงื่อนไขเพื่อบอกว่าถ้าเจอวงเล็บเปิดให้ชี้ตำเเหน่งของnodeลูกเป็นตำเเหน่งที่เราสนใจ
                if self.mylist[self.left] == 'None' :      #เป็นเงื่อนไขเพื่อบอกว่าnodeลูกฝั่งซ้ายว่างหรือไม่ถ้าว่างทำ if ถ้าไม่ทำ else
                    p = self.left
                else :                                              
                    p = self.right
            elif i in '0123456789' :                         #เป็นเงื่อนไขเพื่อบอกว่าถ้าเจอตัวเลขให้ใส่เข้าไปในnodeลูกจากตำเเหน่งที่เราสนใจ
                if self.mylist[self.left] == 'None' :      #เป็นเงื่อนไขเพื่อบอกว่าnodeลูกฝั่งซ้ายว่างหรือไม่ ถ้าว่างทำ if ถ้าไม่ทำ else
                    self.mylist[self.left] = i
                else :
                    self.mylist[self.right] = i
            elif i in '+-*/' :                                      #เป็นเงื่อนไขเพื่อบอกว่าถ้าเจอพวกเครื่องหมายให้ใส่เข้าไปในตำเเหน่งที่เราสนใจหรือก็คือnodeพ่อเเม่
                self.mylist[p] = i 
                
            else :                              #เป็นเงื่อนไขเพื่อบอกว่าถ้าเจอวงเล็บปิดให้เลื่อนการชี้ตำเเหน่งของnodeลูกเป็นชี้ตำเเหน่งของปู่เป็นตำเเหน่งที่เราสนใจ
                if p%2 == 1 :                   #เป็นเงื่อนไขในกรณีที่เจอว่าวงเล็บปิดอยู่ที่nodeซ้าย
                    p = int((p-1)/2)
                else :
                    p = int((p-2)/2)             #เป็นเงื่อนไขในกรณีที่เจอว่าวงเล็บปิดอยู่ที่nodeซ้าย
                    
        return self.mylist


exp1 = "(3+(4*5))"             
tree1 = tree(exp1)
create_tree = tree1.making()
print(create_tree)

# output : ['+', '3', '*', 'None', 'None', '4', '5']  

